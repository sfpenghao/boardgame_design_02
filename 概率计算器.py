import random
from collections import Counter
from math import comb
import itertools
import time

def 蒙特卡罗模拟(元素配置, 目标组合, 模拟次数=100000):
    """
    使用蒙特卡罗模拟计算概率
    """
    # 创建完整元素列表
    元素列表 = []
    for 元素, 数量 in 元素配置.items():
        元素列表.extend([元素] * 数量)
    
    # 转换目标组合
    目标计数 = Counter(目标组合)
    成功次数 = 0
    
    # 开始模拟
    开始时间 = time.time()
    for _ in range(模拟次数):
        # 随机抽取5个元素
        样本 = random.sample(元素列表, 5)
        样本计数 = Counter(样本)
        
        # 检查是否包含目标组合
        包含目标 = True
        for 元素, 需要数量 in 目标计数.items():
            if 样本计数.get(元素, 0) < 需要数量:
                包含目标 = False
                break
        
        if 包含目标:
            成功次数 += 1
    
    用时 = time.time() - 开始时间
    概率 = 成功次数 / 模拟次数
    
    return 概率, 成功次数, 用时

def 精确计算(元素配置, 目标组合):
    """
    使用精确数学方法计算概率
    """
    # 创建完整元素列表
    元素列表 = []
    for 元素, 数量 in 元素配置.items():
        元素列表.extend([元素] * 数量)
    
    总元素数 = len(元素列表)
    目标计数 = Counter(目标组合)
    
    # 计算总的抽取方式数
    总方式数 = comb(总元素数, 5)
    
    # 计算成功方式数
    成功方式数 = 0
    开始时间 = time.time()
    
    for 组合索引 in itertools.combinations(range(总元素数), 5):
        选中元素 = [元素列表[i] for i in 组合索引]
        选中计数 = Counter(选中元素)
        
        # 检查是否包含目标组合
        包含目标 = True
        for 元素, 需要数量 in 目标计数.items():
            if 选中计数.get(元素, 0) < 需要数量:
                包含目标 = False
                break
        
        if 包含目标:
            成功方式数 += 1
    
    用时 = time.time() - 开始时间
    概率 = 成功方式数 / 总方式数
    
    return 概率, 成功方式数, 总方式数, 用时

def 显示结果(元素配置, 目标组合, 使用精确计算=True):
    """
    显示计算结果
    """
    print(f"\n{'='*60}")
    print(f"概率计算结果")
    print(f"{'='*60}")
    print(f"集合配置: {元素配置}")
    print(f"总元素数: {sum(元素配置.values())}")
    print(f"目标组合: {目标组合}")
    print(f"目标需求: {dict(Counter(目标组合))}")
    
    # 蒙特卡罗模拟
    print(f"\n【蒙特卡罗模拟结果】")
    模拟概率, 模拟成功数, 模拟用时 = 蒙特卡罗模拟(元素配置, 目标组合)
    print(f"模拟次数: 100,000")
    print(f"成功次数: {模拟成功数:,}")
    print(f"概率: {模拟概率:.6f} ({模拟概率*100:.4f}%)")
    print(f"计算用时: {模拟用时:.3f}秒")
    
    # 精确计算（如果启用）
    if 使用精确计算 and sum(元素配置.values()) <= 15:
        print(f"\n【精确数学计算结果】")
        精确概率, 精确成功数, 精确总数, 精确用时 = 精确计算(元素配置, 目标组合)
        print(f"总抽取方式: {精确总数:,}")
        print(f"成功方式数: {精确成功数:,}")
        print(f"精确概率: {精确概率:.8f} ({精确概率*100:.6f}%)")
        print(f"计算用时: {精确用时:.3f}秒")
        
        # 比较两种方法
        误差 = abs(模拟概率 - 精确概率)
        print(f"\n【方法对比】")
        print(f"模拟结果: {模拟概率:.6f}")
        print(f"精确结果: {精确概率:.6f}")
        print(f"绝对误差: {误差:.6f}")
        print(f"相对误差: {误差/精确概率*100:.4f}%")
    else:
        if sum(元素配置.values()) > 15:
            print(f"\n注意: 元素总数超过15个，跳过精确计算以节省时间")

def 快速分析():
    """
    快速分析常见场景
    """
    print("="*60)
    print("快速场景分析")
    print("="*60)
    
    场景 = [
        ({'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2}, "AAB", "基础配置求AAB"),
        ({'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2}, "ABC", "基础配置求ABC"),
        ({'A': 3, 'B': 3, 'C': 2, 'D': 2, 'E': 2}, "AAB", "增强AB求AAB"),
        ({'A': 4, 'B': 2, 'C': 2, 'D': 2, 'E': 2}, "AAA", "增强A求AAA"),
    ]
    
    结果汇总 = []
    
    for 配置, 组合, 描述 in 场景:
        print(f"\n{'='*40}")
        print(f"场景: {描述}")
        print(f"{'='*40}")
        
        # 只用蒙特卡罗模拟来加快速度
        概率, 成功数, 用时 = 蒙特卡罗模拟(配置, 组合, 50000)
        
        print(f"配置: {配置}")
        print(f"目标: {组合}")
        print(f"概率: {概率:.6f} ({概率*100:.4f}%)")
        
        结果汇总.append((描述, 概率))
    
    print(f"\n{'='*60}")
    print("汇总对比")
    print(f"{'='*60}")
    for 描述, 概率 in 结果汇总:
        print(f"{描述:15} : {概率:.6f} ({概率*100:.4f}%)")

def 自定义分析():
    """
    用户自定义分析
    """
    print(f"\n{'='*60}")
    print("自定义概率分析")
    print(f"{'='*60}")
    
    try:
        print("请设置集合中各元素的数量（建议每种至少2个）:")
        配置 = {}
        for 元素 in ['A', 'B', 'C', 'D', 'E']:
            while True:
                try:
                    数量 = int(input(f"元素{元素}的数量: "))
                    if 数量 >= 0:
                        配置[元素] = 数量
                        break
                    else:
                        print("数量不能为负数")
                except ValueError:
                    print("请输入有效数字")
        
        # 移除数量为0的元素
        配置 = {k: v for k, v in 配置.items() if v > 0}
        
        if sum(配置.values()) < 5:
            print("总元素数必须至少为5个才能抽取5个元素")
            return
        
        目标 = input("请输入目标组合（如AAB）: ").strip().upper()
        
        if 目标 and all(c in 配置.keys() for c in 目标):
            # 检查目标组合是否可能实现
            目标需求 = Counter(目标)
            可行 = True
            for 元素, 需要 in 目标需求.items():
                if 配置.get(元素, 0) < 需要:
                    print(f"警告: 元素{元素}需要{需要}个，但集合中只有{配置.get(元素, 0)}个")
                    可行 = False
            
            if 可行:
                显示结果(配置, 目标)
            else:
                print("目标组合无法实现")
        else:
            print("输入的组合包含集合中不存在的元素")
            
    except KeyboardInterrupt:
        print("\n用户取消输入")
    except Exception as e:
        print(f"输入错误: {e}")

def 主菜单():
    """
    主菜单
    """
    while True:
        print(f"\n{'='*60}")
        print("🎲 概率计算器 🎲")
        print(f"{'='*60}")
        print("1. 快速场景分析")
        print("2. 自定义分析")
        print("3. 查看使用说明")
        print("4. 退出程序")
        print(f"{'='*60}")
        
        选择 = input("请选择功能 (1-4): ").strip()
        
        if 选择 == '1':
            快速分析()
        elif 选择 == '2':
            自定义分析()
        elif 选择 == '3':
            显示使用说明()
        elif 选择 == '4':
            print("感谢使用概率计算器！")
            break
        else:
            print("无效选择，请重新输入")

def 显示使用说明():
    """
    显示使用说明
    """
    print(f"\n{'='*60}")
    print("使用说明")
    print(f"{'='*60}")
    print("""
📖 问题描述:
   从包含A、B、C、D、E五种元素的集合中随机抽取5个元素，
   计算抽取结果包含指定组合（如AAB）的概率。

🎯 功能特点:
   • 蒙特卡罗模拟：快速得到近似结果
   • 精确计算：数学方法得到准确结果（小规模问题）
   • 自动选择：根据问题规模自动选择计算方法

📊 输入格式:
   • 元素数量：每种元素在集合中的个数
   • 目标组合：要求包含的元素组合（如"AAB"表示至少2个A和1个B）

⚡ 计算方法:
   • 总元素≤15：使用精确计算
   • 总元素>15：只使用蒙特卡罗模拟

📈 结果解读:
   • 概率值：0-1之间的小数，越大表示越容易出现
   • 百分比：概率的百分比表示，更直观
   • 用时：计算所花费的时间

💡 应用场景:
   • 桌游概率计算
   • 抽卡游戏分析
   • 统计学习
   • 概率论验证
""")

if __name__ == "__main__":
    print("欢迎使用概率计算器！")
    print("本程序用于计算集合抽取概率问题")
    主菜单() 